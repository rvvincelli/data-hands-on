Import a table:
ogr2ogr -update -append -progress -f PostgreSQL PG:"dbname='postgres' host='localhost' port='5432' user='postgres' password='postgres'" /media/host/data/buurten.shp -nln public.buurten -a_srs EPSG:28992

Line sums:
CREATE VIEW bikepath_sums AS
SELECT b.bcnaam AS hood, SUM(ST_LENGTH(ST_Intersection(b.wkb_geometry, f.wkb_geometry)))/ST_Area(b.wkb_geometry) AS norm_path_length, b.wkb_geometry AS hood_poly
FROM buurten b, fietsnetwerk f
WHERE ST_IsValid(b.wkb_geometry) AND ST_IsValid(F.wkb_geometry) AND ST_Intersects(b.wkb_geometry, f.wkb_geometry)
GROUP BY b.bcnaam, b.wkb_geometry;

Bike friendliness
CREATE TABLE bike_friendliness AS
SELECT hood, CEILING(norm_path_length * 4 / ((SELECT MAX(norm_path_length) FROM bikepath_sums)  - (SELECT MIN(norm_path_length) FROM bikepath_sums))) AS bike_friend_scale, hood_poly
FROM bikepath_sums;

Neighboorhood graphs
CREATE TABLE hood_graphs AS SELECT a.hood AS a_hood, b.hood AS b_hood, a.bike_friend_scale AS a_scale, b.bike_friend_scale AS b_scale FROM bike_friendliness a CROSS JOIN bike_friendliness b WHERE a.hood != b.hood AND ST_Distance(a.hood_poly, b.hood_poly) < 0.01 AND a.bike_friend_scale = b.bike_friend_scale;

Import data
bike_graphs = sc.textFile('/media/host/data/bike_graphs.csv', 4).map(lambda line: line.split(","))

Print data
bike_graphs.foreach(lambda x: print(x))

Filter data
bike_graphs_input = bike_graphs.filter(lambda x: x[2]=='2' or x[3]=='3')

Trace back area names

